{"version":3,"sources":["js/board.js","js/player.js","js/ai.js","js/game.js","js/index.js"],"names":["Board","cells","Array","fill","validMove","move","getValidMoves","reduce","acc","cell","index","setCell","pos","value","winner","winr","a","b","c","d","e","f","g","h","i","includes","toString","map","clone","Player","name","id","token","playMove","AI","CALC_TIME","playToEnd","gs","status","moves","getStatus","valid","Math","floor","random","length","makeMove","stats","score","total","times","eta","Date","now","moveIdx","newGS","player","best","bestMove","bestScore","avg","calcMove","setTimeout","gameState","GameState","board","players","currentPlayer","setPlayer","isAI","getBoardState","newGame","nextPlayerTurn","ROBOHASH_URL","window","ticTacToe","document","querySelector","renderBoard","forEach","children","className","classList","add","toLowerCase","avatarImg","img","createElement","src","click","startGame","player1","player2","checked","replaceWith","style","display","play","event","target","contains","split","textContent","addEventListener"],"mappings":"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","file":"js.1132cfdd.js","sourceRoot":"..","sourcesContent":["/* eslint-disable no-bitwise */\nexport default function Board(cells = new Array(9).fill(0)) {\n  const checkIfWinner = () => {\n    const [a, b, c, d, e, f, g, h, i] = cells;\n    return (a & b & c)\n        || (d & e & f)\n        || (g & h & i)\n        || (a & d & g)\n        || (b & e & h)\n        || (c & f & i)\n        || (a & e & i)\n        || (c & e & g);\n  };\n\n  const validMove = (move) => (move >= 1) && (move <= 9) && !cells[move - 1];\n\n  const getValidMoves = () => cells\n    .reduce((acc, cell, index) => (cell ? acc : [...acc, index + 1]), []);\n\n  const setCell = (pos, value) => {\n    cells[pos - 1] = value + 1;\n  };\n\n  const winner = () => {\n    const winr = checkIfWinner();\n    if (winr) {\n      return winr - 1;\n    }\n    if (!cells.includes(0)) {\n      return -1;\n    }\n    return null;\n  };\n\n  const toString = () => cells.map((cell) => [' ', 'X', 'O'][cell]);\n\n  const clone = () => Board([...cells]);\n\n  return {\n    validMove,\n    getValidMoves,\n    setCell,\n    winner,\n    toString,\n    clone,\n  };\n}\n","export default function Player(name, id) {\n  const token = ['X', 'O'][id];\n\n  const playMove = () => {};\n\n  return {\n    name,\n    token,\n    playMove,\n  };\n}\n","export default function AI(name, id, CALC_TIME = 500) {\n  const token = ['X', 'O'][id];\n\n  const playToEnd = (gs) => {\n    let status;\n    let moves = 1;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      status = gs.getStatus();\n      if (status.status !== 'playing') {\n        break;\n      }\n      const valid = gs.getValidMoves();\n      const move = valid[Math.floor(Math.random() * valid.length)];\n      gs.playMove(move);\n      moves += 1;\n    }\n    status.moves = moves;\n    return status;\n  };\n\n  const calcMove = (gs) => {\n    const stats = gs.getValidMoves().map((move) => ({ move, score: 0, total: 0 }));\n    let times = 0;\n    for (let eta = Date.now() + CALC_TIME; Date.now() < eta && times < 1e5; times += 1) {\n      const moveIdx = Math.floor(Math.random() * stats.length);\n      const { move } = stats[moveIdx];\n      const newGS = gs.clone();\n      newGS.playMove(move);\n      const { status, moves, player = {} } = playToEnd(newGS);\n      if (status === 'win') {\n        if (player.token === token) {\n          stats[moveIdx].score += 1.0 / moves;\n        } else {\n          stats[moveIdx].score -= 1.0 / moves;\n        }\n      }\n      stats[moveIdx].total += 1;\n    }\n\n    const best = stats.reduce(({ bestMove, bestScore }, { move, score, total }) => {\n      const avg = score / total;\n      if (avg > bestScore) {\n        return { bestMove: move, bestScore: avg };\n      }\n      return { bestMove, bestScore };\n    }, { bestMove: 0, bestScore: -9e99 });\n\n    return best.bestMove;\n  };\n\n  const playMove = (gs, makeMove) => {\n    const move = calcMove(gs);\n    setTimeout(() => makeMove(move), 100);\n  };\n\n  return {\n    name,\n    token,\n    playMove,\n  };\n}\n","import Board from './board';\nimport Player from './player';\nimport AI from './ai';\n\nconst gameState = (function GameState(board = Board(), players = [], currentPlayer = 0) {\n  const newGame = (player = 0) => {\n    board = Board();\n    currentPlayer = player;\n  };\n\n  const setPlayer = (name, id, isAI = false) => {\n    players[id] = isAI ? AI(name, id) : Player(name, id);\n  };\n\n  const playMove = (move) => {\n    if (board.validMove(move)) {\n      board.setCell(move, currentPlayer);\n      currentPlayer = 1 - currentPlayer;\n      return true;\n    }\n    return false;\n  };\n\n  const getStatus = () => {\n    switch (board.winner()) {\n      case 0:\n        return { status: 'win', player: players[0] };\n      case 1:\n        return { status: 'win', player: players[1] };\n      case -1:\n        return { status: 'draw' };\n      default:\n        return { status: 'playing' };\n    }\n  };\n\n  const getBoardState = () => board.toString();\n\n  const clone = () => GameState(board.clone(), [...players], currentPlayer);\n\n  const getValidMoves = () => board.getValidMoves();\n\n  const nextPlayerTurn = (makeMove) => {\n    players[currentPlayer].playMove(gameState, makeMove);\n  };\n\n  return {\n    setPlayer,\n    playMove,\n    getStatus,\n    getBoardState,\n    newGame,\n    clone,\n    getValidMoves,\n    nextPlayerTurn,\n  };\n}());\n\nexport default gameState;\n","import gameState from './game';\n\nconst ROBOHASH_URL = 'https://robohash.org';\n\nwindow.gs = gameState;\n\nconst ticTacToe = document.querySelector('#tic-tac-toe');\nconst winner = document.querySelector('#winner');\n\nfunction renderBoard() {\n  gameState.getBoardState().forEach((cell, index) => {\n    if (cell === ' ') {\n      document.querySelector('#tic-tac-toe').children[index].className = 'cell';\n    } else {\n      document.querySelector('#tic-tac-toe').children[index].classList.add(cell.toLowerCase());\n    }\n  });\n}\n\nfunction avatarImg(name, id) {\n  const img = document.createElement('img');\n  img.src = `${ROBOHASH_URL}/${name}`;\n  img.id = `avatar-${id}`;\n  return img;\n}\n\nfunction makeMove(move) {\n  document.querySelector(`#cell-${move}`).click();\n  renderBoard();\n}\n\nfunction startGame() {\n  gameState.newGame();\n\n  const player1 = document.querySelector('#player-1').value;\n  const player2 = document.querySelector('#player-2').value;\n\n  gameState.setPlayer(player1, 0, document.querySelector('#ai-1').checked);\n  gameState.setPlayer(player2, 1, document.querySelector('#ai-2').checked);\n  document.querySelector('#avatar-1').replaceWith(avatarImg(player1, 1));\n  document.querySelector('#avatar-2').replaceWith(avatarImg(player2, 2));\n\n  ticTacToe.style.display = 'grid';\n  renderBoard();\n  winner.style.display = 'none';\n\n  gameState.nextPlayerTurn(makeMove);\n}\n\nfunction play(event) {\n  if (!event.target.classList.contains('cell') || gameState.getStatus().status !== 'playing') {\n    return;\n  }\n\n  const id = event.target.id.split('-')[1];\n\n  gameState.playMove(id);\n  renderBoard();\n\n  const { status, player: { name } = {} } = gameState.getStatus();\n  if (status !== 'playing') {\n    winner.textContent = status === 'win' ? `Winner: ${name}` : 'No winner!';\n    winner.style.display = 'block';\n    document.querySelector('#play').textContent = 'Play again!';\n  } else {\n    gameState.nextPlayerTurn(makeMove);\n  }\n}\n\nticTacToe.addEventListener('click', play);\ndocument.querySelector('#play').addEventListener('click', startGame);\n"]}