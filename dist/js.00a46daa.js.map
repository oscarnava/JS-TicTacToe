{"version":3,"sources":["js/board.js","js/player.js","js/game.js","js/index.js"],"names":["Board","cells","Array","fill","checkIfWinner","player","validMove","move","setCell","pos","value","winner","includes","toString","map","cell","join","Player","name","id","token","gameState","GameState","board","players","currentPlayer","newGame","setPlayer","playMove","getStatus","status","getBoardState"],"mappings":"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","file":"js.00a46daa.js","sourceRoot":"..","sourcesContent":["export default function Board() {\n  const cells = new Array(9).fill(null);\n\n  const checkIfWinner = (player) => (\n    (cells[0] === player && cells[1] === player && cells[2] === player)\n    || (cells[3] === player && cells[4] === player && cells[5] === player)\n    || (cells[6] === player && cells[7] === player && cells[8] === player)\n    || (cells[0] === player && cells[3] === player && cells[6] === player)\n    || (cells[1] === player && cells[4] === player && cells[7] === player)\n    || (cells[2] === player && cells[5] === player && cells[8] === player)\n    || (cells[0] === player && cells[4] === player && cells[8] === player)\n    || (cells[2] === player && cells[4] === player && cells[6] === player)\n  );\n\n  const validMove = (move) => (move >= 1) && (move <= 9) && (cells[move - 1] === null);\n\n  const setCell = (pos, value) => {\n    cells[pos - 1] = value;\n  };\n\n  const winner = () => {\n    if (checkIfWinner(0)) {\n      return 0;\n    }\n    if (checkIfWinner(1)) {\n      return 1;\n    }\n    if (!cells.includes(null)) {\n      return -1;\n    }\n    return null;\n  };\n\n  const toString = () => cells.map((cell) => (cell === null ? ' ' : ['X', 'O'][cell])).join('');\n\n  return {\n    validMove,\n    setCell,\n    winner,\n    toString,\n  };\n}\n","export default function Player(name, id) {\n  const token = ['X', 'O'][id];\n\n  return {\n    name,\n    token,\n  };\n}\n","import Board from './board';\nimport Player from './player';\n\nconst gameState = (function GameState() {\n  let board = Board();\n  const players = [];\n  let currentPlayer = 0;\n\n  const newGame = (player) => {\n    board = Board();\n    currentPlayer = player;\n  };\n\n  const setPlayer = (name, id) => {\n    players[id] = Player(name, id);\n  };\n\n  const playMove = (move) => {\n    if (board.validMove(move)) {\n      board.setCell(move, currentPlayer);\n      currentPlayer = 1 - currentPlayer;\n      return true;\n    }\n    return false;\n  };\n\n  const getStatus = () => {\n    switch (board.winner()) {\n      case 0:\n        return { status: 'win', player: players[0] };\n      case 1:\n        return { status: 'win', player: players[1] };\n      case -1:\n        return { status: 'draw' };\n      default:\n        return { status: 'playing' };\n    }\n  };\n\n  const getBoardState = () => board.toString();\n\n  return {\n    setPlayer,\n    playMove,\n    getStatus,\n    getBoardState,\n    newGame,\n  };\n}());\n\nexport default gameState;\n","import gameState from './game';\n\n"]}