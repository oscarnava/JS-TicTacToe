{"version":3,"sources":["js/board.js","js/player.js","js/ai.js","js/game.js","js/index.js"],"names":["Board","cells","Array","fill","validMove","move","getValidMoves","reduce","acc","cell","index","concat","setCell","pos","value","winner","winr","a","b","c","d","e","f","g","h","i","checkIfWinner","includes","toString","map","clone","Player","name","id","token","playMove","AI","CALC_TIME","playToEnd","gs","start","status","getStatus","moves","valid","Math","floor","random","length","makeMove","stats","score","total","times","eta","Date","now","stat","player","best","console","log","bestMove","bestScore","avg","calcMove","setTimeout","gameState","GameState","board","players","currentPlayer","setPlayer","isAI","getBoardState","newGame","nextPlayerTurn","ROBOHASH_URL","window","qrySelect","document","querySelector","bind","ticTacToe","player1","player2","ai1","ai2","playBtn","avatar1Img","avatar2Img","renderBoard","forEach","children","className","toLowerCase","trim","click","startGame","checked","src","style","display","play","event","target","classList","contains","split","textContent","addEventListener"],"mappings":"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","file":"js.40dd298e.js","sourceRoot":"..","sourcesContent":["/* eslint-disable no-bitwise */\nexport default function Board(cells = new Array(9).fill(0)) {\n  const checkIfWinner = () => {\n    const [a, b, c, d, e, f, g, h, i] = cells;\n    return (a & b & c)\n        || (d & e & f)\n        || (g & h & i)\n        || (a & d & g)\n        || (b & e & h)\n        || (c & f & i)\n        || (a & e & i)\n        || (c & e & g);\n  };\n\n  const validMove = (move) => (move >= 1) && (move <= 9) && !cells[move - 1];\n\n  const getValidMoves = () => cells\n    .reduce((acc, cell, index) => (cell ? acc : acc.concat(index + 1)), []);\n\n  const setCell = (pos, value) => { cells[pos - 1] = value + 1; };\n\n  const winner = () => {\n    const winr = checkIfWinner();\n    if (winr) {\n      return winr - 1;\n    }\n    if (!cells.includes(0)) {\n      return -1;\n    }\n    return null;\n  };\n\n  const toString = () => cells.map((cell) => [' ', 'X', 'O'][cell]);\n\n  const clone = () => Board([...cells]);\n\n  return {\n    validMove,\n    getValidMoves,\n    setCell,\n    winner,\n    toString,\n    clone,\n  };\n}\n","export default function Player(name, id) {\n  const token = ['X', 'O'][id];\n\n  const playMove = () => {};\n\n  return {\n    name,\n    token,\n    playMove,\n  };\n}\n","export default function AI(name, id, CALC_TIME = 500) {\n  const token = ['X', 'O'][id];\n\n  const playToEnd = (gs, start) => {\n    gs = gs.clone();\n    gs.playMove(start);\n\n    let status = gs.getStatus();\n    let moves = 1;\n    while (status.status === 'playing') {\n      const valid = gs.getValidMoves();\n      const move = valid[Math.floor(Math.random() * valid.length)];\n      gs.playMove(move);\n      status = gs.getStatus();\n      moves += 1;\n    }\n    status.moves = moves;\n    return status;\n  };\n\n  const calcMove = (gs) => {\n    const stats = gs.getValidMoves().map((move) => ({ move, score: 0, total: 0 }));\n    let times = 0;\n    for (let eta = Date.now() + CALC_TIME; Date.now() < eta && times < 5e4; times += 1) {\n      const stat = stats[Math.floor(Math.random() * stats.length)];\n      const { status, moves, player = {} } = playToEnd(gs, stat.move);\n      if (status === 'win') {\n        if (player.token === token) {\n          stat.score += 1.0 / moves;\n        } else {\n          stat.score -= 1.0 / moves;\n        }\n      } else if (status === 'draw') {\n        stat.score += 0.25 / moves;\n      }\n      stat.total += 1;\n    }\n\n    console.log('Times', times, stats);\n\n    const best = stats.reduce(({ bestMove, bestScore }, { move, score, total }) => {\n      const avg = score / total;\n      if (avg > bestScore) {\n        return { bestMove: move, bestScore: avg };\n      }\n      return { bestMove, bestScore };\n    }, { bestMove: 0, bestScore: -9e99 });\n\n    return best.bestMove;\n  };\n\n\n  const playMove = (gs, makeMove) => {\n    const move = calcMove(gs);\n    setTimeout(() => makeMove(move), 100);\n  };\n\n  return {\n    name,\n    token,\n    playMove,\n  };\n}\n","import Board from './board';\nimport Player from './player';\nimport AI from './ai';\n\nconst gameState = (function GameState(board = Board(), players = [], currentPlayer = 0) {\n  const newGame = (player = 0) => {\n    board = Board();\n    currentPlayer = player;\n  };\n\n  const setPlayer = (name, id, isAI = false) => {\n    players[id] = isAI ? AI(name, id) : Player(name, id);\n  };\n\n  const playMove = (move) => {\n    if (board.validMove(move)) {\n      board.setCell(move, currentPlayer);\n      currentPlayer = 1 - currentPlayer;\n      return true;\n    }\n    return false;\n  };\n\n  const getStatus = () => {\n    switch (board.winner()) {\n      case 0:\n        return { status: 'win', player: players[0] };\n      case 1:\n        return { status: 'win', player: players[1] };\n      case -1:\n        return { status: 'draw' };\n      default:\n        return { status: 'playing' };\n    }\n  };\n\n  const getBoardState = () => board.toString();\n\n  const clone = () => GameState(board.clone(), [...players], currentPlayer);\n\n  const getValidMoves = () => board.getValidMoves();\n\n  const nextPlayerTurn = (makeMove) => {\n    players[currentPlayer].playMove(gameState, makeMove);\n  };\n\n  return {\n    setPlayer,\n    playMove,\n    getStatus,\n    getBoardState,\n    newGame,\n    clone,\n    getValidMoves,\n    nextPlayerTurn,\n  };\n}());\n\nexport default gameState;\n","import gameState from './game';\n\nconst ROBOHASH_URL = 'https://robohash.org';\n\nwindow.gs = gameState;\n\nconst qrySelect = document.querySelector.bind(document);\nconst [ticTacToe, winner, player1, player2, ai1, ai2, playBtn, avatar1Img, avatar2Img] = [\n  '#tic-tac-toe', '#winner', '#player-1', '#player-2', '#ai-1', '#ai-2', '#play', '#avatar-1', '#avatar-2',\n].map(qrySelect);\n\nfunction renderBoard() {\n  gameState.getBoardState().forEach((cell, index) => {\n    ticTacToe.children[index].className = `cell ${cell.toLowerCase()}`.trim();\n  });\n}\n\nfunction makeMove(move) {\n  qrySelect(`#cell-${move}`).click();\n  renderBoard();\n}\n\nfunction startGame() {\n  gameState.newGame();\n\n  gameState.setPlayer(player1.value, 0, ai1.checked);\n  gameState.setPlayer(player2.value, 1, ai2.checked);\n\n  avatar1Img.src = `${ROBOHASH_URL}/${player1.value}`;\n  avatar2Img.src = `${ROBOHASH_URL}/${player2.value}`;\n\n  ticTacToe.style.display = 'grid';\n  winner.style.display = 'none';\n  playBtn.style.display = 'none';\n\n  renderBoard();\n  gameState.nextPlayerTurn(makeMove);\n}\n\nfunction play(event) {\n  if (!event.target.classList.contains('cell') || gameState.getStatus().status !== 'playing') {\n    return;\n  }\n\n  gameState.playMove(event.target.id.split('-')[1]);\n  renderBoard();\n\n  const { status, player: { name } = {} } = gameState.getStatus();\n  if (status !== 'playing') {\n    winner.textContent = (status === 'win' ? `Winner: ${name}` : 'No winner!');\n    winner.style.display = 'block';\n    playBtn.textContent = 'Play again!';\n    playBtn.style.display = 'block';\n  } else {\n    gameState.nextPlayerTurn(makeMove);\n  }\n}\n\nticTacToe.addEventListener('click', play);\nplayBtn.addEventListener('click', startGame);\n"]}